<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on xd43D41U5x</title>
    <link>https://xd43d41u5x.github.io/malwaREAnalysis/posts/</link>
    <description>Recent content in Posts on xd43D41U5x</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 04 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://xd43d41u5x.github.io/malwaREAnalysis/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DarkGate</title>
      <link>https://xd43d41u5x.github.io/malwaREAnalysis/posts/darkgate/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://xd43d41u5x.github.io/malwaREAnalysis/posts/darkgate/</guid>
      <description>Initial stage is an MSI file, which at a high level shows it is related to AutoIT.
Further review of available string data shows this AutoIT script was converted/wrapped into an MSI with a tool from exemsi.com.
Since this is just an MSI file, we can treat it like any other compressed file and explore with 7z. Note: As it was hard to tell exactly what files were unique and which were included as part of the wrapper, I did create a file with that tool to weed out expected items.</description>
    </item>
    
    <item>
      <title>ScrEnc - Unknown malware</title>
      <link>https://xd43d41u5x.github.io/malwaREAnalysis/posts/scriptenc/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://xd43d41u5x.github.io/malwaREAnalysis/posts/scriptenc/</guid>
      <description>This starts off with a RAR file, which contains a single CHM file (Windows Compiled HTML/help). There are two ways to view the content of this file. One is to just use 7zip and treat it like an archive. The other is using the cmd -decompile. Both will leave you with two main files of note, one is hanacard.html, the other is Docs.jse.
If you look at the html file, you can see it is running the same decompile command and placing a copy of the javascript file in the path: Users\\Public\\LIbraries\\Docs.</description>
    </item>
    
    <item>
      <title>RandXor</title>
      <link>https://xd43d41u5x.github.io/malwaREAnalysis/posts/randxor/</link>
      <pubDate>Fri, 26 May 2023 09:41:51 -0400</pubDate>
      
      <guid>https://xd43d41u5x.github.io/malwaREAnalysis/posts/randxor/</guid>
      <description>Looking at this sample, it sort of tries to be a word doc in that the icon and the translated title is: Xin An Tong [2023] No. 4 official document patch repair.
This can be seen in the resource section for this file:
It is however an EXE, that starts off with multiple anti-debug/vm functions. The good thing here is that the symbols remain and a lot of the functions (including main) are labeled in such a way that reversing is straight forward.</description>
    </item>
    
    <item>
      <title>Qbotbb28</title>
      <link>https://xd43d41u5x.github.io/malwaREAnalysis/posts/qbotbb28/</link>
      <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://xd43d41u5x.github.io/malwaREAnalysis/posts/qbotbb28/</guid>
      <description>The JS starts with a fake Angular comment followed by multiple references to Angular in variable names.
The first item to note is the dead code that was injected during this obfuscation. To start cleaning this up, look at the patterns of variable declarations and junk functions that are never actually referenced such as:
Once you start cutting those items out it&amp;rsquo;s easy to see this is a variation of obfuscator io.</description>
    </item>
    
    <item>
      <title>NightHawk</title>
      <link>https://xd43d41u5x.github.io/malwaREAnalysis/posts/nighthawk/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://xd43d41u5x.github.io/malwaREAnalysis/posts/nighthawk/</guid>
      <description>This starts like a normal ISO file style malware, LNK file (ending in .pdf) and hidden dll (here named thumbs.db).
Compliance-checklist.pdf = 9C54FCA1F05AC5442EEBBDC7C02ADA2389DAD61160D8DAEECD568B318964B19A
Thumbs.db = SHA256 = 252A8525216A2D068B7C92C14CD7292FB776193EDDB18E2AE5C11DBF9E1CFE46
The LNK file has a visible link of:
However, there is much more:
Somewhat clean version:
Basically, it is looking for MS Teams in the users local app data directory, then renaming ffmpeg.dll to orgcr32.dll. Ffmpeg is a legit dependency for Teams, however the orgcr32 is not.</description>
    </item>
    
    <item>
      <title>3CX</title>
      <link>https://xd43d41u5x.github.io/malwaREAnalysis/posts/3cx/</link>
      <pubDate>Wed, 05 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://xd43d41u5x.github.io/malwaREAnalysis/posts/3cx/</guid>
      <description>Summary Physical Files Involved 3CXDesktopApp.exe - Has a dependency for ffmpeg.dll. This initial exe appears to be clean. ffmpeg.dll - This dll has been modified at the entry point, so that even upon loading of the dll (no export calls), the malicious code would run. Note: this is an expected file for an electron app. d3dcompiler_47.dll - This dll functions as normal, however has RC4 encrypted data added in the overlay.</description>
    </item>
    
    <item>
      <title>ScrubCrypt/XWorm</title>
      <link>https://xd43d41u5x.github.io/malwaREAnalysis/posts/scrubcrypt/</link>
      <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://xd43d41u5x.github.io/malwaREAnalysis/posts/scrubcrypt/</guid>
      <description>Analysis For this sample, the batch file decrypts two payloads, one is another unpacker/dropper and the other is a .Net executable with a singular purpose of bypassing ETW so that EDR and AV will not stop the final payload. The .Net unpacker/dropper contains resources that it decodes then loads into memory. One of which looks to be XWorm (based on C2 strings) and the other is an unidentified native/compiled executable that will be covered in a separate report.</description>
    </item>
    
    <item>
      <title>Malicious Chrome Ext</title>
      <link>https://xd43d41u5x.github.io/malwaREAnalysis/posts/stegochrome/</link>
      <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://xd43d41u5x.github.io/malwaREAnalysis/posts/stegochrome/</guid>
      <description>Analysis To start, we will only be looking at the two files of interest and not the whole thing (background.js and promo.jpg). By looking in background.js, there is an area that stands out, with a variable named “Promo” and a function defined/called there.
A couple of notes before digging into how this works.
It&amp;rsquo;s referencing a jpg file (really a png) and it&amp;rsquo;s drawing/loading that image.
So at some point we will realize this is a requirement and since VSCode uses Node.</description>
    </item>
    
    <item>
      <title>SideFury</title>
      <link>https://xd43d41u5x.github.io/malwaREAnalysis/posts/sidefury/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://xd43d41u5x.github.io/malwaREAnalysis/posts/sidefury/</guid>
      <description>Analysis I’ll start by saying this probably isn’t the right name, but based on write-ups I’ve seen similar but not exactly the same items. It feels like a mash up between SideCopy/SideWinder and NightFury.
As a quick summary here is what the overall flow looks like.
This attack starts with a zip file being delivered to the user. The zip file contains what would appear to an end user as a “docx”, however it&amp;rsquo;s really a link file which is abusing the target parameter to pull external content, in this case the 2nd stage to be launched with mshta.</description>
    </item>
    
  </channel>
</rss>
